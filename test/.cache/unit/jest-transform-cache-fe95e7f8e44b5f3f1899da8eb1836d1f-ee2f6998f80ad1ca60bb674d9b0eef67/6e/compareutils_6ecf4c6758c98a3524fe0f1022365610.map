{"file":"/home/jm/Projects/Modules/fp/src/compare-utils.ts","mappings":"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","names":[],"sources":["/home/jm/Projects/Modules/fp/src/compare-utils.ts"],"sourcesContent":["/*\r\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\r\n *\r\n * Licensed under the terms of the LICENSE file distributed with this project.\r\n */\r\n\r\nexport interface IKeyWhitelist<T> {\r\n    include: Array<keyof T>;\r\n}\r\n\r\nexport interface IKeyBlacklist<T> {\r\n    exclude: Array<keyof T>;\r\n}\r\n\r\n/**\r\n * Returns true if the arrays are equal. Elements will be shallowly compared by\r\n * default, or they will be compared using the custom `compare` function if one\r\n * is provided.\r\n */\r\nexport function arraysEqual(arrA: any[], arrB: any[], compare = (a: any, b: any) => a === b) {\r\n    // treat `null` and `undefined` as the same\r\n    if (arrA == null && arrB == null) {\r\n        return true;\r\n    } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\r\n        return false;\r\n    } else {\r\n        return arrA.every((a, i) => compare(a, arrB[i]));\r\n    }\r\n}\r\n\r\n/**\r\n * Shallow comparison between objects. If `keys` is provided, just that subset\r\n * of keys will be compared; otherwise, all keys will be compared.\r\n */\r\nexport function shallowCompareKeys<T extends object>(objA: T, objB: T, keys?: IKeyBlacklist<T> | IKeyWhitelist<T>) {\r\n    // treat `null` and `undefined` as the same\r\n    if (objA == null && objB == null) {\r\n        return true;\r\n    } else if (objA == null || objB == null) {\r\n        return false;\r\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\r\n        return false;\r\n    } else if (keys != null) {\r\n        return _shallowCompareKeys(objA, objB, keys);\r\n    } else {\r\n        // shallowly compare all keys from both objects\r\n        const keysA = Object.keys(objA) as Array<keyof T>;\r\n        const keysB = Object.keys(objB) as Array<keyof T>;\r\n        return (\r\n            _shallowCompareKeys(objA, objB, { include: keysA }) && _shallowCompareKeys(objA, objB, { include: keysB })\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Deep comparison between objects. If `keys` is provided, just that subset of\r\n * keys will be compared; otherwise, all keys will be compared.\r\n */\r\nexport function deepCompareKeys(objA: any, objB: any, keys?: string[]): boolean {\r\n    if (objA === objB) {\r\n        return true;\r\n    } else if (objA == null && objB == null) {\r\n        // treat `null` and `undefined` as the same\r\n        return true;\r\n    } else if (objA == null || objB == null) {\r\n        return false;\r\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\r\n        return arraysEqual(objA, objB, deepCompareKeys);\r\n    } else if (_isSimplePrimitiveType(objA) || _isSimplePrimitiveType(objB)) {\r\n        return objA === objB;\r\n    } else if (keys != null) {\r\n        return _deepCompareKeys(objA, objB, keys);\r\n    } else if (objA.constructor !== objB.constructor) {\r\n        return false;\r\n    } else {\r\n        const keysA = Object.keys(objA);\r\n        const keysB = Object.keys(objB);\r\n        if (keysA == null || keysB == null) {\r\n            return false;\r\n        }\r\n        if (keysA.length === 0 && keysB.length === 0) {\r\n            return true;\r\n        }\r\n        return arraysEqual(keysA, keysB) && _deepCompareKeys(objA, objB, keysA);\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a descriptive object for each key whose values are shallowly unequal\r\n * between two provided objects. Useful for debugging shouldComponentUpdate.\r\n */\r\nexport function getShallowUnequalKeyValues<T extends object>(\r\n    objA: T,\r\n    objB: T,\r\n    keys?: IKeyBlacklist<T> | IKeyWhitelist<T>,\r\n) {\r\n    // default param values let null values pass through, so we have to take\r\n    // this more thorough approach\r\n    const definedObjA = objA === null ? {} : objA;\r\n    const definedObjB = objB === null ? {} : objB;\r\n\r\n    const filteredKeys = _filterKeys(definedObjA as T, definedObjB as T, keys == null ? { exclude: [] } : keys);\r\n    return _getUnequalKeyValues(definedObjA as T, definedObjB as T, filteredKeys, (a, b, key) => {\r\n        return shallowCompareKeys(a, b, { include: [key] });\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a descriptive object for each key whose values are deeply unequal\r\n * between two provided objects. Useful for debugging shouldComponentUpdate.\r\n */\r\nexport function getDeepUnequalKeyValues<T extends object>(\r\n    objA: T = ({} as any) as T,\r\n    objB: T = ({} as any) as T,\r\n    keys?: Array<keyof T>,\r\n) {\r\n    const filteredKeys = keys == null ? _unionKeys(objA, objB) : keys;\r\n    return _getUnequalKeyValues(objA, objB, filteredKeys, (a, b, key) => {\r\n        return deepCompareKeys(a, b, [key as string]);\r\n    });\r\n}\r\n\r\n// Private helpers\r\n// ===============\r\n\r\n/**\r\n * Partial shallow comparison between objects using the given list of keys.\r\n */\r\nfunction _shallowCompareKeys<T>(objA: T, objB: T, keys: IKeyBlacklist<T> | IKeyWhitelist<T>) {\r\n    return _filterKeys(objA, objB, keys).every(key => {\r\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\r\n    });\r\n}\r\n\r\n/**\r\n * Partial deep comparison between objects using the given list of keys.\r\n */\r\nfunction _deepCompareKeys(objA: any, objB: any, keys: string[]): boolean {\r\n    return keys.every(key => {\r\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\r\n    });\r\n}\r\n\r\nfunction _isSimplePrimitiveType(value: any) {\r\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\r\n}\r\n\r\nfunction _filterKeys<T>(objA: T, objB: T, keys: IKeyBlacklist<T> | IKeyWhitelist<T>) {\r\n    if (_isWhitelist(keys)) {\r\n        return keys.include;\r\n    } else {\r\n        const keysA = Object.keys(objA);\r\n        const keysB = Object.keys(objB);\r\n\r\n        // merge keys from both objects into a big set for quick access\r\n        const keySet = _arrayToObject(keysA.concat(keysB));\r\n\r\n        // delete blacklisted keys from the key set\r\n        if (keys[\"exclude\"]){\r\n            keys[\"exclude\"].forEach(key => delete keySet[key]);\r\n        }\r\n\r\n        // return the remaining keys as an array\r\n        return Object.keys(keySet) as Array<keyof T>;\r\n    }\r\n}\r\n\r\nfunction _isWhitelist<T>(keys: any): keys is IKeyWhitelist<T> {\r\n    return keys != null && (keys as IKeyWhitelist<T>).include != null;\r\n}\r\n\r\nfunction _arrayToObject(arr: any[]) {\r\n    return arr.reduce((obj: any, element: any) => {\r\n        obj[element] = true;\r\n        return obj;\r\n    }, {});\r\n}\r\n\r\nfunction _getUnequalKeyValues<T extends object>(\r\n    objA: T,\r\n    objB: T,\r\n    keys: Array<keyof T>,\r\n    compareFn: (objA: any, objB: any, key: keyof T) => boolean,\r\n) {\r\n    const unequalKeys = keys.filter(key => !compareFn(objA, objB, key));\r\n    const unequalKeyValues = unequalKeys.map(key => ({\r\n        key,\r\n        valueA: objA[key],\r\n        valueB: objB[key],\r\n    }));\r\n    return unequalKeyValues;\r\n}\r\n\r\nfunction _unionKeys<T extends object>(objA: T, objB: T) {\r\n    const keysA = Object.keys(objA);\r\n    const keysB = Object.keys(objB);\r\n\r\n    const concatKeys = keysA.concat(keysB);\r\n    const keySet = _arrayToObject(concatKeys);\r\n\r\n    return Object.keys(keySet) as Array<keyof T>;\r\n}\r\n"],"version":3}