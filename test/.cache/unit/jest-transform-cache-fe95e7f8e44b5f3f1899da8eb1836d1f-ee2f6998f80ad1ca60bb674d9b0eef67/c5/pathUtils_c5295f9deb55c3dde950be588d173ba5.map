{"file":"/home/jm/Projects/Modules/path/src/pathUtils.ts","mappings":";;;AAAA,mDAA6B;AAE7B,uBAAuB;AAGvB;;;;;;;;;GASG;AAEU,QAAA,UAAU,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;AACtE,6DAA6D;AAGhD,QAAA,WAAW,GAAG,CAAC,QAAa,EAAE,UAAmB,EAAE,EAAE;IAChE,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;IAEvC,IAAI,QAAQ,IAAI,CAAC,UAAU,EAAE;QAC3B,OAAO,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;KACtD;SAAM,IAAI,CAAC,QAAQ,IAAI,UAAU,EAAE;QAClC,OAAO,GAAG,QAAQ,GAAG,CAAA;KACtB;SAAM;QACL,OAAO,QAAQ,CAAA;KAChB;AACH,CAAC,CAAA;AAIY,QAAA,KAAK,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnD,QAAA,WAAW,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC3D,QAAA,MAAM,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACpE;;;;;;;;qCAQqC;AACrC,SAAgB,gBAAgB,CAAC,IAAY;IACzC,UAAU,CAAA;AACd,CAAC;AAFD,4CAEC;AAED,SAAgB,aAAa,CAAC,IAAY,EAAE,OAAoC;IAC5E,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,MAAM,IAAI,SAAS,CAAC,8BAA8B,CAAC,CAAC;KACrD;IAED,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG;QAAE,OAAO,GAAG,CAAC;IAE9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;IACtB,IAAI,GAAG,IAAI,CAAC;QAAE,OAAO,IAAI,CAAC;IAE1B,4EAA4E;IAC5E,+EAA+E;IAC/E,uFAAuF;IACvF,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QAC/B,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,MAAM,EAAE;YAC7D,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,GAAG,IAAI,CAAC;SACf;KACF;IAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAI,OAAO,IAAI,OAAO,CAAC,aAAa,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9E,IAAI,CAAC,GAAG,EAAE,CAAC;KACZ;IACD,OAAO,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC;AA3BH,sCA2BG;AAAA,CAAC","names":[],"sources":["/home/jm/Projects/Modules/path/src/pathUtils.ts"],"sourcesContent":["import * as path from 'path';\r\nimport { PathLike } from 'fs';\r\n//export * from 'path';\r\n\r\n\r\n/* import path = require('path');\r\nimport findUp = require('find-up');\r\n\r\nexport const findPkg = cwd => findUp('package.json', {cwd}).then(fp => fp ? path.dirname(fp) : null);\r\n\r\nexport const sync = cwd => {\r\n\tconst fp = findUp.sync('package.json', {cwd});\r\n\treturn fp ? path.dirname(fp) : null;\r\n};\r\n */\r\n\r\nexport const toAbsolute = (filepath: string) => path.resolve(filepath)\r\n//export const exists = (path: PathLike) => existsSync(path);\r\n\r\n\r\nexport const ensureSlash = (filepath: any, needsSlash: boolean) => {\r\n  const hasSlash = filepath.endsWith('/')\r\n\r\n  if (hasSlash && !needsSlash) {\r\n    return filepath.substr(filepath, filepath.length - 1)\r\n  } else if (!hasSlash && needsSlash) {\r\n    return `${filepath}/`\r\n  } else {\r\n    return filepath\r\n  }\r\n}\r\n\r\n \r\n\r\nexport const isDir = (filepath: string) => /\\/$/.test(filepath);\r\nexport const isDirectory = (filepath: string) => filepath.endsWith(\"/\");\r\nexport const isFile = (filepath: string) => !filepath.endsWith(\"/\");\r\n/* const toDest = (file: string) => {\r\n    return path.format({ \r\n            dir,\r\n         name: path.parse.\r\n         ext: '.code-workspace' });\r\n\r\n\r\nconst dir = path.parse(src).dir;\r\nconst name = path.parse(src).name; */\r\nexport function parsePackageName(name: string){\r\n    /@\\w*(\\*)/\r\n}\r\n\r\nexport function normalizePath(path: string, options?: { stripTrailing: boolean }) {\r\n    if (typeof path !== 'string') {\r\n      throw new TypeError('expected path to be a string');\r\n    }\r\n  \r\n    if (path === '\\\\' || path === '/') return '/';\r\n  \r\n    let len = path.length;\r\n    if (len <= 1) return path;\r\n  \r\n    // ensure that win32 namespaces has two leading slashes, so that the path is\r\n    // handled properly by the win32 version of path.parse() after being normalized\r\n    // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\r\n    let prefix = '';\r\n    if (len > 4 && path[3] === '\\\\') {\r\n      var ch = path[2];\r\n      if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\r\n        path = path.slice(2);\r\n        prefix = '//';\r\n      }\r\n    }\r\n  \r\n    const segs = path.split(/[/\\\\]+/);\r\n    if (options && options.stripTrailing !== false && segs[segs.length - 1] === '') {\r\n      segs.pop();\r\n    }\r\n    return prefix + segs.join('/');\r\n  };\r\n\r\n"],"version":3}